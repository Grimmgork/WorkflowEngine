@inject IJSRuntime js;
@implements IAsyncDisposable;

<div style=@Style>
    <canvas @ref=@canvasElement>
    </canvas>
</div>

@code {
    [Parameter]
    public string? Style { get; set; }

    private List<WorkflowFunctionNode> functions = new List<WorkflowFunctionNode>();

    private ElementReference? canvasElement;
    private IJSObjectReference? canvasState;

    protected override async Task OnInitializedAsync()
    {
        functions.Add(new WorkflowFunctionNode() { Id = 0, XPos=5, YPos=5, FunctionName = "print", Signature = WorkflowFunctionSignature.Create("print").AddInput("message") });
        functions.Add(new WorkflowFunctionNode() { Id = 0, XPos = 5, YPos = 5, FunctionName = "add", Signature = WorkflowFunctionSignature.Create("add").AddInput("a").AddInput("a") });
        functions.Add(new WorkflowFunctionNode() { Id = 0, XPos=5, YPos=5, FunctionName = "if", 
        Signature = WorkflowFunctionSignature.Create("if")
        .AddInput("then")
        .AddInput("else")
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await InitializeCanvas();
    }

    private async Task InitializeCanvas()
    {
        canvasState = await js.InvokeAsync<IJSObjectReference>("initWorkflowEditor", canvasElement);
        await canvasState.InvokeVoidAsync("addFunctionNode");
    }


    [JSInvokable]
    public static Task OnFunctionNodeDetailsClicked(WorkflowEditor instance, int id)
    {
        return instance.OnFunctionNodeDetailsClicked(id);
    }

    [JSInvokable]
    public static Task OnBackdropClicked(WorkflowEditor instance, int id)
    {
        return instance.OnBackdropClicked();
    }

    [JSInvokable]
    public static Task OnInputNodeConnected(WorkflowEditor instance, int from, int to)
    {
        return instance.OnBackdropClicked();
    }

    private async Task OnFunctionNodeDetailsClicked(int id)
    {
        
    }

    private async Task OnBackdropClicked()
    {

    }

    private async Task AddInputNode()
    {

    }

    private async Task RemoveInputNode()
    {

    }

    private async Task SetInput()
    {
        
    }

    public async ValueTask DisposeAsync()
    {
        if (canvasState != null)
            await canvasState.InvokeVoidAsync("dispose");
    }
}
